// https://mp.weixin.qq.com/s/By-iXlONjSZLKFG2Xd7rpg

1. 异步请求如何取消请求： xhr.abort()

2. Axios如何取消请求：axios.CancelToken

`
  const CancelToken = axios.CancelToken()
  const source = CancelToken.source()

  source.cancel("msg")
`

3. 也可以通过调用CancelToken的构造函数来创建CancelToken：
`
  const CancelToken = axios.CancelToken()
  let cancel

  axios.get('xxxx', {
    cancelToken: new CancelToken(function executor(c){
      cancel = c
    })
  })

  // 取消请求
  cancel()
`

4. 如何判断重复请求：
  通过请求方式、url和请求参数做md5生成请求唯一key，暂存在map中

5. 如何取消重复请求：
  通过axios的拦截器，在拦截器中判断缓存map中是否有新请求的key，存在时，通过CancelToken实例调用cancel方法实现取消请求，同时删除map中的key，再次请求时，将key添加到map中

  定义辅助函数generateReqKey
`
  function generateReqKey(config) {
    const {method, url, params, data } = config

    return [method, url, Qs.stringify(params), Qs.stringify(data)].join('&')
  }
`
  addPendingRequest：用于把当前请求信息添加到pendingRequest对象中；

`
  const pendingRequest = new Map();
  function addPendingRequest(config) {
    const requestKey = generateReqKey(config);
    config.cancelToken = config.cancelToken || new axios.CancelToken((cancel) => {
      if (!pendingRequest.has(requestKey)) {
         pendingRequest.set(requestKey, cancel);
      }
    });
  }
`

  removePendingRequest：检查是否存在重复请求，若存在则取消已发的请求。

`
  function removePendingRequest(config) {
    const requestKey = generateReqKey(config);
    if (pendingRequest.has(requestKey)) {
       const cancelToken = pendingRequest.get(requestKey);
       cancelToken(requestKey);
       pendingRequest.delete(requestKey);
    }
  }
`

  设置请求拦截器
`
  axios.interceptors.request.use(
    function (config) {
      removePendingRequest(config); // 检查是否存在重复请求，若存在则取消已发的请求
      addPendingRequest(config); // 把当前请求信息添加到pendingRequest对象中
      return config;
    },
    (error) => {
       return Promise.reject(error);
    }
  );
`

设置相应拦截器

`
  axios.interceptors.response.use(
    (response) => {
       removePendingRequest(response.config); // 从pendingRequest对象中移除请求
       return response;
     },
     (error) => {
        removePendingRequest(error.config || {}); // 从pendingRequest对象中移除请求
        if (axios.isCancel(error)) {
          console.log("已取消的重复请求：" + error.message);
        } else {
          // 添加异常处理
        }
        return Promise.reject(error);
     }
  );
`
  
6. 运行结果











