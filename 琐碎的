一、上线清单：
产品是要写测试用例的。
我们需要找合作方确定的时间点有：
1、设计稿时间
2、可联调时间
3、测试用例提供时间
4、产品测试完成时间
5、上线时间
可以作为我们的标准化流程来操作。这些在一个需求开发前就可以确认下来的

二、技术进阶
刚入门的话可以做性能优化、技术分享、项目脚手架、CI/CD 自动化部署、开发工具提效、Vue/React 双转等，这些基本上一个人就可以整起来。
复杂一点可以做错误监控、性能监控、运营配置平台、跨端研发、自动化测试、低代码搭建、端智能等，这些就会复杂些，需要团队作战，可以和同事一起共建。
另外大家在选择技术方向的时候一定要多和主管沟通，看看主管认为团队中现在缺少什么，保持大方向上的一致，有时候方向错了，做的越多，越错越累。
因为一个人的力量是有限的，如果仅仅是一名小前端，没有领导的支持是很难推动下去的。
所有的技术专项都是要贴合业务，先把业务做优，在业务中挖掘亮点，让领导看到你的价值，能够放心把技术交给你。
然后，你想要做这块技术专项，首先要确定一个技术方案，想清楚能够给业务、团队带来什么价值，能够解决什么问题，架构如何设计，如何实现能够让这种价值最大化，需要哪些人员参与（例如后端），预计需要开发多长时间，这些要明确一下，然后让领导多支持资源的分配，明确具体的落地时间等。
关于架构设计，要尽可能的细致，以终为始，如何实现，有哪些细节需要处理，需要后端如何配合等，这些都要明确，此时你的定位不只是作为前端，更是作为一个 owner 去推进整件事，所有方方面面都要考虑仔细。
当然所有的这些都是在尽量不影响现有业务的情况下进行的，所以你要投入更多的时间。当然上面说的都是技术方向，如果你对深入技术完全没兴趣，也可以多去了解业务，如果对你所在的业务有很深入的洞见的话，那也是非常稀缺的人才。
最后，保持积极主动阳光合作共赢，加油。

三、源码阅读的三层境界

初级：记流水账
我初期的源码阅读文章基本上是记流水账，例如对源码一样一行加注释，只关注底层实现细节，但并未形成更高层次认知，对其设计理念没有提炼与深度领悟。
中级：能提问、思考、提炼
随着技术类文章的持续分享， 我认识了很多大牛，发现和他们交流的时候，发现他们一开始并不会说细节，而是讲设计理念。
这就要求我们在阅读源码的时候多思考，并反问自己如果自己实现的话该如何着手，如何设计，带着疑问去研究源码。通过对比，思考，会对其背后的理念有了更深刻的理解。
高级：思考、质疑、验证
不管是哪个开源框架，都会存在BUG或者实现并不合理的地方，如果大家在阅读源码的时候能够深入思考， 合理质疑，并能通过验证证明自己的观点，然后与官方取得联系，交流，共同促进社区的发展，说明我们的能力、思考得到了极大的提升。
思考与质疑是源码阅读的一个升华，比如我在看Sentinel 熔断时对其提出的质疑。

四、技术pm的项目推进全流程：
1. 需求调研（产品）
2. 需求评审（要求有需求文档、设计稿），明确任务和功能，明确UI展示，考虑所有情况
3. 技术调研，给出排期，明确提测时间
4. 技术评审，后端接口设计评审（接口结构、字段名等）、前端技术评审（）
5. 项目搭建与开发，前期技术调研充分，多人协作才能顺利
6. 项目架构（技术栈、目录结构等，要灵活易扩展）、工程化（webpack），最佳实践、CSS（modules模式）、组件化（公共业务组件，一个组件只完成一个功能原则）、react router动态路由（hooks用法等）、mobx（v6及最佳实践等）、本地开发环境（webpack，mock数据等）
7. 提测之前完成测试用例（测试同学提供）评审，自测
8. 提测

